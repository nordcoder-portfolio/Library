// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/library/library.proto

package library

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _library_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Book with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Book) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Book with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BookMultiError, or nil if none found.
func (m *Book) ValidateAll() error {
	return m.validate(true)
}

func (m *Book) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = BookValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	for idx, item := range m.GetAuthorId() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = BookValidationError{
				field:  fmt.Sprintf("AuthorId[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookMultiError(errors)
	}

	return nil
}

func (m *Book) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BookMultiError is an error wrapping multiple validation errors returned by
// Book.ValidateAll() if the designated constraints aren't met.
type BookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookMultiError) AllErrors() []error { return m }

// BookValidationError is the validation error returned by Book.Validate if the
// designated constraints aren't met.
type BookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookValidationError) ErrorName() string { return "BookValidationError" }

// Error satisfies the builtin error interface
func (e BookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookValidationError{}

// Validate checks the field values on AddBookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBookRequestMultiError,
// or nil if none found.
func (m *AddBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetAuthorId() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = AddBookRequestValidationError{
				field:  fmt.Sprintf("AuthorId[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddBookRequestMultiError(errors)
	}

	return nil
}

func (m *AddBookRequest) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddBookRequestMultiError is an error wrapping multiple validation errors
// returned by AddBookRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookRequestMultiError) AllErrors() []error { return m }

// AddBookRequestValidationError is the validation error returned by
// AddBookRequest.Validate if the designated constraints aren't met.
type AddBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookRequestValidationError) ErrorName() string { return "AddBookRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookRequestValidationError{}

// Validate checks the field values on AddBookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBookResponseMultiError, or nil if none found.
func (m *AddBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBookResponseMultiError(errors)
	}

	return nil
}

// AddBookResponseMultiError is an error wrapping multiple validation errors
// returned by AddBookResponse.ValidateAll() if the designated constraints
// aren't met.
type AddBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookResponseMultiError) AllErrors() []error { return m }

// AddBookResponseValidationError is the validation error returned by
// AddBookResponse.Validate if the designated constraints aren't met.
type AddBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookResponseValidationError) ErrorName() string { return "AddBookResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookResponseValidationError{}

// Validate checks the field values on UpdateBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookRequestMultiError, or nil if none found.
func (m *UpdateBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateBookRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	for idx, item := range m.GetAuthorId() {
		_, _ = idx, item

		if err := m._validateUuid(item); err != nil {
			err = UpdateBookRequestValidationError{
				field:  fmt.Sprintf("AuthorId[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateBookRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateBookRequest) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateBookRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBookRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookRequestMultiError) AllErrors() []error { return m }

// UpdateBookRequestValidationError is the validation error returned by
// UpdateBookRequest.Validate if the designated constraints aren't met.
type UpdateBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookRequestValidationError) ErrorName() string {
	return "UpdateBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookRequestValidationError{}

// Validate checks the field values on UpdateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookResponseMultiError, or nil if none found.
func (m *UpdateBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBookResponseMultiError(errors)
	}

	return nil
}

// UpdateBookResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateBookResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookResponseMultiError) AllErrors() []error { return m }

// UpdateBookResponseValidationError is the validation error returned by
// UpdateBookResponse.Validate if the designated constraints aren't met.
type UpdateBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookResponseValidationError) ErrorName() string {
	return "UpdateBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookResponseValidationError{}

// Validate checks the field values on GetBookInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookInfoRequestMultiError, or nil if none found.
func (m *GetBookInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetBookInfoRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBookInfoRequestMultiError(errors)
	}

	return nil
}

func (m *GetBookInfoRequest) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetBookInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookInfoRequestMultiError) AllErrors() []error { return m }

// GetBookInfoRequestValidationError is the validation error returned by
// GetBookInfoRequest.Validate if the designated constraints aren't met.
type GetBookInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookInfoRequestValidationError) ErrorName() string {
	return "GetBookInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookInfoRequestValidationError{}

// Validate checks the field values on GetBookInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookInfoResponseMultiError, or nil if none found.
func (m *GetBookInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookInfoResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookInfoResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookInfoResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookInfoResponseMultiError(errors)
	}

	return nil
}

// GetBookInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookInfoResponseMultiError) AllErrors() []error { return m }

// GetBookInfoResponseValidationError is the validation error returned by
// GetBookInfoResponse.Validate if the designated constraints aren't met.
type GetBookInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookInfoResponseValidationError) ErrorName() string {
	return "GetBookInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookInfoResponseValidationError{}

// Validate checks the field values on RegisterAuthorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAuthorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAuthorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAuthorRequestMultiError, or nil if none found.
func (m *RegisterAuthorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAuthorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 512 {
		err := RegisterAuthorRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterAuthorRequest_Name_Pattern.MatchString(m.GetName()) {
		err := RegisterAuthorRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+( [A-Za-z0-9]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterAuthorRequestMultiError(errors)
	}

	return nil
}

// RegisterAuthorRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterAuthorRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterAuthorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAuthorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAuthorRequestMultiError) AllErrors() []error { return m }

// RegisterAuthorRequestValidationError is the validation error returned by
// RegisterAuthorRequest.Validate if the designated constraints aren't met.
type RegisterAuthorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAuthorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAuthorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAuthorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAuthorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAuthorRequestValidationError) ErrorName() string {
	return "RegisterAuthorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAuthorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAuthorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAuthorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAuthorRequestValidationError{}

var _RegisterAuthorRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9]+( [A-Za-z0-9]+)*$")

// Validate checks the field values on RegisterAuthorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAuthorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAuthorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAuthorResponseMultiError, or nil if none found.
func (m *RegisterAuthorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAuthorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RegisterAuthorResponseMultiError(errors)
	}

	return nil
}

// RegisterAuthorResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterAuthorResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterAuthorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAuthorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAuthorResponseMultiError) AllErrors() []error { return m }

// RegisterAuthorResponseValidationError is the validation error returned by
// RegisterAuthorResponse.Validate if the designated constraints aren't met.
type RegisterAuthorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAuthorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAuthorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAuthorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAuthorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAuthorResponseValidationError) ErrorName() string {
	return "RegisterAuthorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAuthorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAuthorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAuthorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAuthorResponseValidationError{}

// Validate checks the field values on ChangeAuthorInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAuthorInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAuthorInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAuthorInfoRequestMultiError, or nil if none found.
func (m *ChangeAuthorInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAuthorInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ChangeAuthorInfoRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 512 {
		err := ChangeAuthorInfoRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ChangeAuthorInfoRequest_Name_Pattern.MatchString(m.GetName()) {
		err := ChangeAuthorInfoRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]+( [A-Za-z0-9]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeAuthorInfoRequestMultiError(errors)
	}

	return nil
}

func (m *ChangeAuthorInfoRequest) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ChangeAuthorInfoRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeAuthorInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeAuthorInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAuthorInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAuthorInfoRequestMultiError) AllErrors() []error { return m }

// ChangeAuthorInfoRequestValidationError is the validation error returned by
// ChangeAuthorInfoRequest.Validate if the designated constraints aren't met.
type ChangeAuthorInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAuthorInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAuthorInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAuthorInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAuthorInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAuthorInfoRequestValidationError) ErrorName() string {
	return "ChangeAuthorInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAuthorInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAuthorInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAuthorInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAuthorInfoRequestValidationError{}

var _ChangeAuthorInfoRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9]+( [A-Za-z0-9]+)*$")

// Validate checks the field values on ChangeAuthorInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAuthorInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAuthorInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAuthorInfoResponseMultiError, or nil if none found.
func (m *ChangeAuthorInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAuthorInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeAuthorInfoResponseMultiError(errors)
	}

	return nil
}

// ChangeAuthorInfoResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeAuthorInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeAuthorInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAuthorInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAuthorInfoResponseMultiError) AllErrors() []error { return m }

// ChangeAuthorInfoResponseValidationError is the validation error returned by
// ChangeAuthorInfoResponse.Validate if the designated constraints aren't met.
type ChangeAuthorInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAuthorInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAuthorInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAuthorInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAuthorInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAuthorInfoResponseValidationError) ErrorName() string {
	return "ChangeAuthorInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAuthorInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAuthorInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAuthorInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAuthorInfoResponseValidationError{}

// Validate checks the field values on GetAuthorInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorInfoRequestMultiError, or nil if none found.
func (m *GetAuthorInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetAuthorInfoRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAuthorInfoRequestMultiError(errors)
	}

	return nil
}

func (m *GetAuthorInfoRequest) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAuthorInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuthorInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthorInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorInfoRequestMultiError) AllErrors() []error { return m }

// GetAuthorInfoRequestValidationError is the validation error returned by
// GetAuthorInfoRequest.Validate if the designated constraints aren't met.
type GetAuthorInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorInfoRequestValidationError) ErrorName() string {
	return "GetAuthorInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorInfoRequestValidationError{}

// Validate checks the field values on GetAuthorInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorInfoResponseMultiError, or nil if none found.
func (m *GetAuthorInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GetAuthorInfoResponseMultiError(errors)
	}

	return nil
}

// GetAuthorInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuthorInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthorInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorInfoResponseMultiError) AllErrors() []error { return m }

// GetAuthorInfoResponseValidationError is the validation error returned by
// GetAuthorInfoResponse.Validate if the designated constraints aren't met.
type GetAuthorInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorInfoResponseValidationError) ErrorName() string {
	return "GetAuthorInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorInfoResponseValidationError{}

// Validate checks the field values on GetAuthorBooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorBooksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorBooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorBooksRequestMultiError, or nil if none found.
func (m *GetAuthorBooksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorBooksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetAuthorId()); err != nil {
		err = GetAuthorBooksRequestValidationError{
			field:  "AuthorId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAuthorBooksRequestMultiError(errors)
	}

	return nil
}

func (m *GetAuthorBooksRequest) _validateUuid(uuid string) error {
	if matched := _library_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAuthorBooksRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuthorBooksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthorBooksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorBooksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorBooksRequestMultiError) AllErrors() []error { return m }

// GetAuthorBooksRequestValidationError is the validation error returned by
// GetAuthorBooksRequest.Validate if the designated constraints aren't met.
type GetAuthorBooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorBooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorBooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorBooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorBooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorBooksRequestValidationError) ErrorName() string {
	return "GetAuthorBooksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorBooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorBooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorBooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorBooksRequestValidationError{}
