// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/project/library/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// BooksRepository is an autogenerated mock type for the BooksRepository type
type BooksRepository struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: ctx, book
func (_m *BooksRepository) AddBook(ctx context.Context, book entity.Book) (entity.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for AddBook")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Book) (entity.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Book) entity.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: ctx, bookID
func (_m *BooksRepository) GetBookByID(ctx context.Context, bookID string) (entity.Book, error) {
	ret := _m.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Book, error)); ok {
		return rf(ctx, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Book); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBookInfoByID provides a mock function with given fields: ctx, bookID, info, authorIDs
func (_m *BooksRepository) UpdateBookInfoByID(ctx context.Context, bookID string, info string, authorIDs []string) (entity.Book, error) {
	ret := _m.Called(ctx, bookID, info, authorIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBookInfoByID")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (entity.Book, error)); ok {
		return rf(ctx, bookID, info, authorIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) entity.Book); ok {
		r0 = rf(ctx, bookID, info, authorIDs)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, bookID, info, authorIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBooksRepository creates a new instance of BooksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBooksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BooksRepository {
	mock := &BooksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
