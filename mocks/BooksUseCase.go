// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/project/library/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// BooksUseCase is an autogenerated mock type for the BooksUseCase type
type BooksUseCase struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: ctx, name, authorIDs
func (_m *BooksUseCase) AddBook(ctx context.Context, name string, authorIDs []string) (entity.Book, error) {
	ret := _m.Called(ctx, name, authorIDs)

	if len(ret) == 0 {
		panic("no return value specified for AddBook")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (entity.Book, error)); ok {
		return rf(ctx, name, authorIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) entity.Book); ok {
		r0 = rf(ctx, name, authorIDs)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, name, authorIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: ctx, bookID
func (_m *BooksUseCase) GetBook(ctx context.Context, bookID string) (entity.Book, error) {
	ret := _m.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Book, error)); ok {
		return rf(ctx, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Book); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: ctx, bookID, name, authorIDs
func (_m *BooksUseCase) UpdateBook(ctx context.Context, bookID string, name string, authorIDs []string) (entity.Book, error) {
	ret := _m.Called(ctx, bookID, name, authorIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (entity.Book, error)); ok {
		return rf(ctx, bookID, name, authorIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) entity.Book); ok {
		r0 = rf(ctx, bookID, name, authorIDs)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, bookID, name, authorIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBooksUseCase creates a new instance of BooksUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBooksUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BooksUseCase {
	mock := &BooksUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
