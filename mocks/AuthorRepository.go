// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/project/library/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// AuthorRepository is an autogenerated mock type for the AuthorRepository type
type AuthorRepository struct {
	mock.Mock
}

// ChangeAuthorInfoByID provides a mock function with given fields: ctx, id, info
func (_m *AuthorRepository) ChangeAuthorInfoByID(ctx context.Context, id string, info string) (entity.Author, error) {
	ret := _m.Called(ctx, id, info)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAuthorInfoByID")
	}

	var r0 entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.Author, error)); ok {
		return rf(ctx, id, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.Author); ok {
		r0 = rf(ctx, id, info)
	} else {
		r0 = ret.Get(0).(entity.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorBooks provides a mock function with given fields: ctx, id
func (_m *AuthorRepository) GetAuthorBooks(ctx context.Context, id string) ([]*entity.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorBooks")
	}

	var r0 []*entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorByID provides a mock function with given fields: ctx, id
func (_m *AuthorRepository) GetAuthorByID(ctx context.Context, id string) (entity.Author, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorByID")
	}

	var r0 entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Author, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Author); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAuthor provides a mock function with given fields: ctx, author
func (_m *AuthorRepository) RegisterAuthor(ctx context.Context, author entity.Author) (entity.Author, error) {
	ret := _m.Called(ctx, author)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAuthor")
	}

	var r0 entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Author) (entity.Author, error)); ok {
		return rf(ctx, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Author) entity.Author); ok {
		r0 = rf(ctx, author)
	} else {
		r0 = ret.Get(0).(entity.Author)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Author) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthorRepository creates a new instance of AuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorRepository {
	mock := &AuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
